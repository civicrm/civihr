<?php

class CRM_HRLeaveAndAbsences_BAO_PublicHoliday extends CRM_HRLeaveAndAbsences_DAO_PublicHoliday {

  /**
   * Caches the return value of the getNumberOfPublicHolidaysForPeriod method.
   *
   * The values are indexed by a key, based on the period start and end date,
   * and if the number includes weekends. The key is generated by the
   * getNumberOfPublicHolidaysForPeriodCacheKey method
   *
   * @var array
   */
  private static $numberOfPublicHolidaysForPeriodCache = [];

  /**
   * Create a new PublicHoliday based on array-data
   *
   * @param array $params key-value pairs
   * @return CRM_HRLeaveAndAbsences_DAO_PublicHoliday|NULL
   **/
  public static function create($params) {
    $className = 'CRM_HRLeaveAndAbsences_DAO_PublicHoliday';
    $entityName = 'PublicHoliday';
    $hook = empty($params['id']) ? 'create' : 'edit';

    self::validateParams($params);

    CRM_Utils_Hook::pre($hook, $entityName, CRM_Utils_Array::value('id', $params), $params);
    $instance = new $className();
    $instance->copyValues($params);
    $transaction = new CRM_Core_Transaction();
    $instance->save();
    $transaction->commit();
    CRM_Utils_Hook::post($hook, $entityName, $instance->id, $instance);

    return $instance;
  }

  /**
   * Delete a PublicHoliday with given ID.
   *
   * @param int $id
   */
  public static function del($id) {
    $publicHoliday = new CRM_HRLeaveAndAbsences_DAO_PublicHoliday();
    $publicHoliday->id = $id;
    $publicHoliday->find(true);
    $publicHoliday->delete();
  }

  /**
   * Return an array containing properties of Public Holiday with given ID.
   *
   * @param int $id
   * @return array|NULL
   */
  public static function getValuesArray($id) {
    $result = civicrm_api3('PublicHoliday', 'get', array('id' => $id));
    return !empty($result['values'][$id]) ? $result['values'][$id] : null;
  }

  /**
   * Validates all the params passed to the create method
   *
   * @param array $params
   *
   * @throws \CRM_HRLeaveAndAbsences_Exception_InvalidPublicHolidayException
   */
  private static function validateParams($params) {
    if(empty($params['title']) && empty($params['id'])) {
      throw new CRM_HRLeaveAndAbsences_Exception_InvalidPublicHolidayException(
        'Title value is required'
      );
    }
    self::validateDate($params);
    self::checkIfDateIsUnique($params);
  }

  /**
   * If there is no date specified but id exists then we skip the date validation.
   * Otherwise a date cannot be empty and must be a real date.
   *
   * @param array $params
   * @throws \CRM_HRLeaveAndAbsences_Exception_InvalidPublicHolidayException
   * @return bool
   */
  private static function validateDate($params) {
    // Skip date validation if we are editing an exsisting record and no new date is specified.
    if (!isset($params['date']) && !empty($params['id'])) {
      return true;
    }
    if (empty($params['date'])) {
      throw new CRM_HRLeaveAndAbsences_Exception_InvalidPublicHolidayException(
        'Date value is required'
      );
    }
    $dateIsValid = CRM_HRLeaveAndAbsences_Validator_Date::isValid($params['date']);
    if(!$dateIsValid) {
      throw new CRM_HRLeaveAndAbsences_Exception_InvalidPublicHolidayException(
        'Date value should be valid'
      );
    }
  }

  /**
   * Check if there is no Public Holiday already existing with provided date.
   *
   * @param array $params
   * @throws \CRM_HRLeaveAndAbsences_Exception_InvalidPublicHolidayException
   */
  private static function checkIfDateIsUnique($params) {
    // Skip date validation if we are editing an exsisting record and no new date is specified.
    if (!isset($params['date']) && !empty($params['id'])) {
      return true;
    }
    // Check for Public Holiday already existing with given date.
    $duplicateDateParams = array(
      'date' => $params['date'],
    );
    if (!empty($params['id'])) {
      $duplicateDateParams['id'] = array('!=' => $params['id']);
    }
    $duplicateDate = civicrm_api3('PublicHoliday', 'getcount', $duplicateDateParams);
    if ($duplicateDate) {
      throw new CRM_HRLeaveAndAbsences_Exception_InvalidPublicHolidayException(
        'There is a Public Holiday already existing with given date'
      );
    }
  }

  /**
   * Returns the number of active Public Holidays between the given
   * start and end dates (inclusive)
   *
   * Note: As this method can be a little expensive, it caches the resulting
   * number to avoid multiple calls to the database. To force it to load new
   * data from the database, you must first clear the cache by calling the
   * clearNumberOfPublicHolidaysForPeriodCache method.
   *
   * @param string $startDate The start date of the period
   * @param string $endDate The end date of the period
   * @param bool $excludeWeekends When true it will not count Public Holidays that fall on a weekend. It's false by default
   *
   * @return int The Number of Public Holidays for the given Period
   */
  public static function getNumberOfPublicHolidaysForPeriod($startDate, $endDate, $excludeWeekends = false) {
    $startDate = CRM_Utils_Date::processDate($startDate, null, false, 'Ymd');
    $endDate = CRM_Utils_Date::processDate($endDate, null, false, 'Ymd');

    if(self::hasNumberOfPublicHolidaysForPeriodCached($startDate, $endDate, $excludeWeekends)) {
      return self::getCachedNumberOfPublicHolidaysForPeriod($startDate, $endDate, $excludeWeekends);
    }

    $tableName = self::getTableName();
    $query = "
      SELECT COUNT(*) as public_holidays
      FROM {$tableName}
      WHERE date >= %1 AND date <= %2 AND is_active = 1
    ";

    if($excludeWeekends) {
      $query .= ' AND DAYOFWEEK(date) BETWEEN 2 AND 6';
    }

    $queryParams = [
      1 => [$startDate, 'Date'],
      2 => [$endDate, 'Date'],
    ];
    $dao = CRM_Core_DAO::executeQuery($query, $queryParams);
    $dao->fetch(true);

    self::cacheNumberOfPublicHolidaysForPeriod($startDate, $endDate, $excludeWeekends, (int)$dao->public_holidays);
    return self::getCachedNumberOfPublicHolidaysForPeriod($startDate, $endDate, $excludeWeekends);
  }

  /**
   * Returns the number of Public Holidays in the Current Period
   *
   * @param bool $excludeWeekends
   *  If true, public holidays that falls on a weekend won't be counted. Default is false
   *
   * @return int
   */
  public static function getNumberOfPublicHolidaysForCurrentPeriod($excludeWeekends = false) {
    $currentPeriod = CRM_HRLeaveAndAbsences_BAO_AbsencePeriod::getCurrentPeriod();

    if(!$currentPeriod) {
      return 0;
    }

    return self::getNumberOfPublicHolidaysForPeriod(
      $currentPeriod->start_date,
      $currentPeriod->end_date,
      $excludeWeekends
    );
  }

  /**
   * Generates a new cache key based on the given start date, end date and
   * excludeWeekends parameters.
   *
   * @param string $startDate
   * @param string $endDate
   * @param boolean $excludeWeekends
   *
   * @return string
   */
  private static function getNumberOfPublicHolidaysForPeriodCacheKey($startDate, $endDate, $excludeWeekends) {
    return md5($startDate . $endDate . ($excludeWeekends ? '1' : '0'));
  }

  /**
   * Returns if there's a value stored in cache for the given start date, end date
   * and excludeWeekends set of values
   *
   * @param string $startDate
   * @param string $endDate
   * @param boolean $excludeWeekends
   *
   * @return bool
   */
  private static function hasNumberOfPublicHolidaysForPeriodCached($startDate, $endDate, $excludeWeekends) {
    $key = self::getNumberOfPublicHolidaysForPeriodCacheKey($startDate, $endDate, $excludeWeekends);

    return array_key_exists($key, self::$numberOfPublicHolidaysForPeriodCache);
  }

  /**
   * Returns the value stored in cache for the given start date, end date
   * and excludeWeekends set of values
   *
   * @param string $startDate
   * @param string $endDate
   * @param boolean $excludeWeekends
   *
   * @return int
   */
  private static function getCachedNumberOfPublicHolidaysForPeriod($startDate, $endDate, $excludeWeekends) {
    $key = self::getNumberOfPublicHolidaysForPeriodCacheKey($startDate, $endDate, $excludeWeekends);

    return self::$numberOfPublicHolidaysForPeriodCache[$key];
  }

  /**
   * Stores in cache the given number of public holidays for given start date,
   * end date and excludeWeekends set of values. If there's an existing value,
   * it will be overwritten
   *
   * @param string $startDate
   * @param string $endDate
   * @param boolean $excludeWeekends
   * @param int $value
   */
  private static function cacheNumberOfPublicHolidaysForPeriod($startDate, $endDate, $excludeWeekends, $value) {
    $key = self::getNumberOfPublicHolidaysForPeriodCacheKey($startDate, $endDate, $excludeWeekends);
    self::$numberOfPublicHolidaysForPeriodCache[$key] = $value;
  }

  /**
   * Clears the cache of number of public holidays for period
   */
  public static function clearNumberOfPublicHolidaysForPeriodCache() {
    self::$numberOfPublicHolidaysForPeriodCache = [];
  }
}
