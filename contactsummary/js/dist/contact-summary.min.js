eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/components',[\n  'common/angular'\n], function (angular) {\n  return angular.module('leave-absences.components', []);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/components.js"),eval("/* eslint-env amd */\n\n(function (CRM) {\n  define('leave-absences/shared/modules/shared-settings',[\n    'common/angular'\n  ], function (angular) {\n    return angular.module('leave-absences.settings', []).constant('shared-settings', {\n      attachmentToken: CRM.vars.leaveAndAbsences.attachmentToken,\n      debug: CRM.debug,\n      managerPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/manager-leave/',\n      sharedPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/shared/',\n      serverDateFormat: 'YYYY-MM-DD',\n      serverDateTimeFormat: 'YYYY-MM-DD HH:mm:ss',\n      permissions: {\n        admin: {\n          access: 'access leave and absences',\n          administer: 'administer leave and absences'\n        },\n        ssp: {\n          access: 'access leave and absences in ssp',\n          manage: 'manage leave and absences in ssp'\n        }\n      },\n      fileUploader: {\n        queueLimit: 10\n      },\n      statusNames: {\n        approved: 'approved',\n        adminApproved: 'admin_approved',\n        awaitingApproval: 'awaiting_approval',\n        moreInformationRequired: 'more_information_required',\n        rejected: 'rejected',\n        cancelled: 'cancelled'\n      }\n    });\n  });\n})(CRM);\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/shared-settings.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/components/leave-widget/leave-widget.component',[\n  'leave-absences/shared/modules/components',\n  'leave-absences/shared/modules/shared-settings'\n], function (components) {\n  components.component('leaveWidget', {\n    controller: leaveWidgetController,\n    controllerAs: 'leaveWidget',\n    templateUrl: ['shared-settings', function (sharedSettings) {\n      return sharedSettings.sharedPathTpl + 'components/leave-widget/leave-widget.html';\n    }]\n  });\n\n  leaveWidgetController.$inject = ['$log'];\n\n  function leaveWidgetController ($log) {\n    $log.debug('Controller: leaveWidgetController');\n  }\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/components/leave-widget/leave-widget.component.js"),eval("define('contact-summary/modules/filters',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.filters', []);\n});\n\n//# sourceURL=/contact-summary/modules/filters.js"),eval("define('contact-summary/modules/services',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.services', []);\n});\n\n//# sourceURL=/contact-summary/modules/services.js"),eval("define('contact-summary/modules/settings',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.settings', []).constant('settings', {\n        classNamePrefix: 'contactSummary-',\n        contactId: decodeURIComponent((new RegExp('[?|&]cid=([^&;]+?)(&|#|;|$)').exec(location.search) || [, \"\"])[1].replace(/\\+/g, '%20')) || null,\n        debug: true,\n        pathApp: '',\n        pathRest: CRM.url('civicrm/ajax/rest'),\n        pathBaseUrl: CRM.vars.contactsummary.baseURL + '/',\n        // pathRest: '/index.php?q=civicrm/ajax/rest',\n        // pathBaseUrl: 'http://localhost:8900/sites/all/modules/civicrm/tools/extensions/civihr/contactsummary/',\n        pathTpl: 'views/'\n    });\n})\n\n//# sourceURL=/contact-summary/modules/settings.js"),eval("define('contact-summary/modules/controllers',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.controllers', []);\n});\n\n//# sourceURL=/contact-summary/modules/controllers.js"),eval("define('contact-summary/controllers/contactSummary',[\n    'contact-summary/modules/controllers',\n    'contact-summary/modules/settings'\n], function (controllers) {\n    'use strict';\n\n    /**\n     * @ngdoc controller\n     * @name ContactSummaryCtrl\n     * @param $log\n     * @param settings\n     * @constructor\n     */\n    function ContactSummaryCtrl($log, settings) {\n        $log.debug('Controller: ContactSummaryCtrl');\n\n        var templateDir = settings.pathBaseUrl + settings.pathTpl;\n\n        this.partials = {\n            keyDetails: templateDir + '/include/keyDetails.html',\n            keyDates: templateDir + '/include/keyDates.html'\n        };\n\n        this.ready = false;\n    }\n\n    controllers.controller('ContactSummaryCtrl', ['$log', 'settings', ContactSummaryCtrl]);\n});\n\n//# sourceURL=/contact-summary/controllers/contactSummary.js"),eval("define('contact-summary/services/api',[\n    'contact-summary/modules/services'\n], function (services) {\n    'use strict';\n\n    services.factory('ApiService', ['$http', '$q', function ($http, $q) {\n\n        /**\n         * @ngdoc function\n         * @param entityName\n         * @param data\n         * @param action\n         * @param stringify\n         * @returns {*}\n         * @private\n         */\n        function buildData(entityName, data, action, stringify) {\n            if (!angular.isDefined(entityName)) {\n                throw new Error('Entity name not provided');\n            }\n\n            if (!angular.isDefined(action)) {\n                throw new Error('Action not provided');\n            }\n\n            data = angular.extend({\n                entity: entityName,\n                action: action,\n                sequential: 1,\n                json: 1,\n                rowCount: 0\n            }, data);\n\n            // Because data needs to be sent as string for CiviCRM to accept\n            return (!!stringify ? jQuery.param(data) : data);\n        }\n\n        /**\n         * @ngdoc function\n         * @param method\n         * @param data\n         * @param config\n         * @returns {HttpPromise}\n         * @private\n         */\n        function sendRequest(method, data, config) {\n            config = angular.extend({\n                method: method,\n                url: '/civicrm/ajax/rest'\n            }, (method === 'post' ? { data: data } : { params: data }), config);\n\n            return $http(config)\n                .then(function (response) {\n                    if (response.is_error) {\n                        return $q.reject(response);\n                    }\n\n                    return response.data;\n                })\n                .catch(function (response) {\n                    return response;\n                });\n        }\n\n        return {\n            /**\n             * @ngdoc method\n             * @name get\n             * @methodOf ApiService\n             * @param entityName\n             * @param data\n             * @param config\n             * @returns {*}\n             */\n            get: function (entityName, data, config) {\n                return sendRequest('get', buildData(entityName, data, 'get'), config);\n            },\n\n            /**\n             * @ngdoc method\n             * @name post\n             * @methodOf ApiService\n             * @param entityName\n             * @param data\n             * @param action\n             * @param config\n             * @returns {HttpPromise}\n             */\n            post: function (entityName, data, action, config) {\n                config = angular.extend({\n                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                }, config);\n\n                return sendRequest('post', buildData(entityName, data, action, true), config);\n            },\n\n            getValue: function (entityName, data) {\n                // todo\n            },\n\n            create: function (entityName, data) {\n                // todo\n            },\n\n            update: function (entityName, data) {\n                // todo\n            },\n\n            delete: function (entityName, data) {\n                // todo\n            }\n        }\n    }]);\n});\n\n//# sourceURL=/contact-summary/services/api.js"),eval("define('contact-summary/services/item',[\n    'common/moment',\n    'contact-summary/modules/services'\n], function (moment, services) {\n    'use strict';\n\n    /**\n     * @constructor\n     */\n    function ItemService() {\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name ItemService\n         */\n        var factory = {};\n\n        /**\n         * @ngdoc method\n         * @name createInstance\n         * @methodOf ItemService\n         * @returns {(Object|ItemService)}\n         */\n        factory.createInstance = function () {\n            var instance = Object.create(this);\n            instance.item = {};\n\n            return instance;\n        };\n\n        /**\n         * @ngdoc method\n         * @name get\n         * @methodOf ItemService\n         * @returns {Object}\n         */\n        factory.get = function () {\n            return this.item;\n        };\n\n        /**\n         * @ngdoc method\n         * @name set\n         * @methodOf ItemService\n         * @param data\n         */\n        factory.set = function (data) {\n            if (!angular.isObject(data)) {\n                throw new TypeError('Data must be of type Object');\n            }\n\n            this.item = data;\n        };\n\n        /**\n         * @ngdoc method\n         * @name setKey\n         * @methodOf ItemService\n         * @param key\n         * @param value\n         */\n        factory.setKey = function (key, value) {\n            this.item[key] = value;\n        };\n\n        return factory;\n    }\n\n    services.factory('ItemService', ItemService);\n});\n\n//# sourceURL=/contact-summary/services/item.js"),eval("define('contact-summary/services/model',[\n    'contact-summary/modules/services',\n    'contact-summary/services/item'\n], function (services) {\n    'use strict';\n\n    /**\n     * Base service to extend.\n     *\n     * This will have common functionality to avoid duplication of functionality between services.\n     *\n     * @param {ItemService} Item\n     * @constructor\n     */\n    function ModelService(Item) {\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name ModelService\n         * @type {Object}\n         */\n        var factory = {};\n\n        /**\n         * @name data\n         * @propertyOf ModelService\n         * @type {ItemService}\n         */\n        factory.data = {};\n\n        /**\n         * @ngdoc method\n         * @name createInstance\n         * @methodOf ModelService\n         * @returns {(ModelService|Object)}\n         * @constructs\n         */\n        factory.createInstance = function () {\n            var instance = Object.create(this);\n            instance.data = Item.createInstance();\n\n            return instance;\n        };\n\n        /**\n         * @ngdoc method\n         * @name getData\n         * @methodOf ModelService\n         * @this factory\n         * @returns {Object}\n         */\n        factory.getData = function () {\n            return this.data.get();\n        };\n\n        /**\n         * @ngdoc method\n         * @name setData\n         * @methodOf ModelService\n         * @this factory\n         * @param value\n         */\n        factory.setData = function (value) {\n            this.data.set(value);\n        };\n\n        /**\n         * @ngdoc method\n         * @name setDataKey\n         * @methodOf ModelService\n         * @this factory\n         * @param key\n         * @param value\n         */\n        factory.setDataKey = function (key, value) {\n            this.data.setKey(key, value);\n        };\n\n        return factory;\n    }\n\n    services.factory('ModelService', ['ItemService', ModelService]);\n});\n\n//# sourceURL=/contact-summary/services/model.js"),eval("define('contact-summary/services/contactDetails',[\n    'common/lodash',\n    'common/moment',\n    'contact-summary/modules/services',\n    'contact-summary/modules/settings',\n    'contact-summary/services/api',\n    'contact-summary/services/model'\n], function (_, moment, services) {\n    'use strict';\n\n    /**\n     * @param Api\n     * @param {ModelService} Model\n     * @param settings\n     * @param $q\n     * @param $log\n     * @returns {*|Object|ModelService}\n     * @constructor\n     */\n    function ContactDetailsService($q, $log, Api, Model, settings) {\n        $log.debug('Service: ContactDetailsService');\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name ContactDetailsService\n         */\n        var factory = Model.createInstance();\n\n        /**\n         * @ngdoc method\n         * @name get\n         * @methodOf ContactDetailsService\n         * @this ContactDetailsService\n         * @returns {*}\n         */\n        factory.get = function () {\n            /** @type {(ContactDetailsService|ModelService)} */\n            var self = this;\n            var deferred = $q.defer();\n\n            init().then(function () {\n                deferred.resolve(self.getData());\n            });\n\n            return deferred.promise;\n        };\n\n        /////////////////////\n        // Private Members //\n        /////////////////////\n\n        function init() {\n            var deferred = $q.defer();\n\n            if (_.isEmpty(factory.getData())) {\n                var contactId = settings.contactId;\n\n                Api.get('Contact', {contact_id: contactId, return: 'birth_date'})\n                    .then(function (response) {\n                        if (response.values.length === 0) {\n                            throw new Error('Contact with ID ' + contactId + ' not found');\n                        }\n\n                        var dob = response.values[0].birth_date;\n                        var age = moment(dob, 'YYYY-MM-DD').isValid()\n                            ? calculateAge(dob)\n                            : '';\n\n                        factory.setDataKey('id', contactId);\n                        factory.setDataKey('dateOfBirth', dob);\n                        factory.setDataKey('age', age);\n\n                        deferred.resolve();\n                    })\n                    .catch(function (response) {\n                        deferred.reject(response);\n                    });\n            } else {\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }\n\n      /**\n       * Calculate age from birth date\n       *\n       * @param {string} dateOfBirth Date of birth in a YYYY-MM-DD format\n       * @returns {string}\n       */\n        function calculateAge(dateOfBirth) {\n            return moment().diff(moment(dateOfBirth, 'YYYY-MM-DD'), 'years');\n        }\n\n        return factory;\n    }\n\n    services.factory('ContactDetailsService', ['$q', '$log', 'ApiService', 'ModelService', 'settings', ContactDetailsService]);\n});\n\n//# sourceURL=/contact-summary/services/contactDetails.js"),eval("define('contact-summary/services/contract',[\n  'common/lodash',\n  'contact-summary/modules/services',\n  'contact-summary/services/api',\n  'contact-summary/services/contactDetails',\n  'contact-summary/services/model',\n], function (_, services) {\n  'use strict';\n\n    var promiseCache = {};\n\n  /**\n   * @param {ApiService} Api\n   * @param {ModelService} Model\n   * @param {ContactDetailsService} ContactDetails\n   * @param $q\n   * @param $log\n   * @returns {ModelService|Object|ItemService|*}\n   * @constructor\n   */\n  function ContractService($q, $log, Api, Model, ContactDetails) {\n    $log.debug('Service: Contract Service');\n\n    ////////////////////\n    // Public Members //\n    ////////////////////\n\n    /**\n     * TODO: Implement a collection and extend it instead\n     *\n     * @ngdoc service\n     * @name ContractService\n     */\n    //var factory = Model.createInstance();\n    var factory = {};\n\n    initializeCollection();\n\n    factory.getCollection = function () {\n      return this.collection.get();\n    };\n\n    /**\n     * @ngdoc method\n     * @name get\n     * @methodOf ContractService\n     * @returns {*}\n     */\n    factory.get = function () {\n      /** @type {(ContractService|ModelService)} */\n      var self = this;\n\n      return init().then(function () {\n        //return self.getData();\n        return self.getCollection();\n      });\n    };\n\n    /**\n     * A primary contract is:\n     * 1. (If exists) a contract with is_primary=1 that is active, or\n     * 2. The most recent contract that is active\n     *\n     * @ngdoc method\n     * @name getPrimary\n     * @methodOf ContractService\n     */\n    factory.getPrimary = function () {\n      return this.get().then(function (response) {\n        var sortedContracts = _.sortBy(response, function (o) {\n          return [o.end_date, +o.is_primary];\n        });\n\n        return _.last(sortedContracts) || {};\n      });\n    };\n\n    /**\n     * Reset contracts and promiseCache to initial state\n     * @ngdoc method\n     * @name resetContracts\n     * @methodOf ContractService\n     * @returns void\n     */\n    factory.resetContracts = function () {\n      contracts = [];\n      promiseCache = {};\n      initializeCollection();\n    };\n\n    factory.getContracts = function () {\n      var deferred = $q.defer();\n      if (_.isEmpty(contracts)) {\n        ContactDetails.get()\n          .then(function (response) {\n            var data = {\n              contact_id: response.id,\n              'api.HRJobContractRevision.getcurrentrevision': {jobcontract_id: '$value.id'}\n            };\n\n            return Api.get('HRJobContract', data);\n          })\n          .then(function (response) {\n            var activeContracts = response.values.filter(function (contract) {\n              return parseInt(contract.deleted) === 0;\n            });\n\n            if (activeContracts.length === 0) {\n              return deferred.reject('No job contract found');\n            }\n\n            contracts = activeContracts;\n\n            deferred.resolve(contracts);\n          })\n          .catch(function (response) {\n            deferred.reject(response);\n          });\n      } else {\n        deferred.resolve(contracts);\n      }\n\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getContractDetails\n     * @methodOf ContractService\n     * @param id\n     * @returns {*}\n     */\n    factory.getContractDetails = function (id) {\n      var addPay = function (details) {\n        var pay = {};\n\n        if (details.api_HRJobPay_get.values.length !== 0) {\n          pay.amount = details.api_HRJobPay_get.values[0].pay_amount;\n          pay.currency = details.api_HRJobPay_get.values[0].pay_currency;\n        }\n\n        details.pay = pay;\n      };\n\n      var addHours = function (details) {\n        var hours = {};\n\n        if (details.api_HRJobHour_get.values.length !== 0) {\n          hours.amount = details.api_HRJobHour_get.values[0].hours_amount;\n          hours.unit = details.api_HRJobHour_get.values[0].hours_unit;\n        }\n\n        details.hours = hours;\n      };\n\n      var data = {\n        jobcontract_id: id,\n        'api.HRJobPay.get': {'jobcontract_id': id},\n        'api.HRJobHour.get': {'jobcontract_id': id}\n      };\n\n      if (!promiseCache.getContractDetails) {\n            promiseCache.getContractDetails = Api.post('HRJobDetails', data, 'get')\n              .then(function (response) {\n                if (response.values.length === 0) {\n                  return $q.reject('No details found for contract revision with ID ' + id);\n                }\n\n                var details = response.values[0];\n\n                addPay(details);\n                addHours(details);\n\n                return details;\n              });\n          }\n\n          return promiseCache.getContractDetails;\n    };\n\n    /**\n     * Get an object containing 'days', 'months' and 'years' keys with\n     * integer values of total Length of Service value, for example:\n     * {\n     *   days: 9,\n     *   months: 2,\n     *   years: 0\n     * }\n     *\n     * @name getLengthOfService\n     * @methodOf ContractService\n     * @returns {*}\n     */\n    factory.getLengthOfService = function () {\n      var deferred = $q.defer();\n      ContactDetails.get()\n        .then(function (response) {\n          return Api.post(\n            'HRJobContract',\n            {\n              sequential: 0,\n              contact_id: response.id\n            },\n            'getlengthofserviceymd'\n          )\n        })\n        .then(function (response) {\n          if (!response.is_error) {\n            deferred.resolve(response.values);\n          } else {\n            deferred.reject(response);\n          }\n        })\n        .catch(function (response) {\n          deferred.reject(response);\n        });\n\n      return deferred.promise;\n    };\n\n    /////////////////////\n    // Private Members //\n    /////////////////////\n\n    var contracts = [];\n\n    function initializeCollection() {\n      factory.collection = {\n        items: {},\n        insertItem: function (key, item) {\n          this.items[key] = item;\n        },\n        getItem: function (key) {\n          return this.items[key];\n        },\n        set: function (collection) {\n          this.items = collection;\n        },\n        get: function () {\n          return this.items;\n        }\n      };\n    }\n\n    function init() {\n      var deferred = $q.defer();\n      if (_.isEmpty(factory.collection.get())) {\n        factory.getContracts()\n                .then(assembleContracts)\n                .finally(function () {\n                  deferred.resolve();\n                });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }\n\n    function assembleContracts() {\n      var deferred = $q.defer(), promises = [];\n\n      angular.forEach(contracts, function (contract) {\n        var assembledContract = {};\n\n        assembledContract.id = contract.id;\n        assembledContract.is_primary = contract.is_primary;\n        assembledContract.is_current = contract.is_current;\n        assembledContract.revision_id = null;\n\n        if (contract.api_HRJobContractRevision_getcurrentrevision) {\n          assembledContract.revision_id = contract.api_HRJobContractRevision_getcurrentrevision.values.id;\n        }\n\n        var promise = factory.getContractDetails(contract.id)\n          .then(function (response) {\n            assembledContract.title = response.title;\n            assembledContract.start_date = response.period_start_date;\n            assembledContract.end_date = response.period_end_date;\n            assembledContract.type = response.contract_type;\n            assembledContract.pay = response.pay;\n            assembledContract.hours = response.hours;\n          })\n          .then(function () {\n            factory.collection.insertItem(contract.id, assembledContract);\n          });\n\n        promises.push(promise);\n      });\n\n      $q.all(promises)\n        .catch(function (response) {\n          $log.error('Something went wrong', response);\n        })\n        .finally(function () {\n          deferred.resolve();\n        });\n\n      return deferred.promise;\n    }\n\n    return factory;\n  }\n\n  services.factory('ContractService', ['$q', '$log', 'ApiService', 'ModelService', 'ContactDetailsService', ContractService]);\n});\n\n//# sourceURL=/contact-summary/services/contract.js"),eval("define('contact-summary/services/jobRole',[\n    'common/lodash',\n    'contact-summary/modules/services',\n    'contact-summary/services/api',\n    'contact-summary/services/contract',\n    'contact-summary/services/model'\n], function (_, services) {\n    'use strict';\n\n    /**\n     * @param {ApiService} Api\n     * @param {ModelService} Model\n     * @param {ContractService} Contract\n     * @param $q\n     * @param $log\n     * @returns {ModelService|Object|*}\n     * @constructor\n     */\n    function JobRoleService($q, $log, Api, Model, Contract) {\n        $log.debug('Service: JobRoleService');\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name JobRoleService\n         */\n        //var factory = Model.createInstance();\n        var factory = {};\n\n        factory.collection = {\n            items: {},\n            insertItem: function (key, item) {\n                this.items[key] = item;\n            },\n            getItem: function (key) {\n                return this.items[key];\n            },\n            set: function (collection) {\n                this.items = collection;\n            },\n            get: function () {\n                return this.items;\n            }\n        };\n\n        factory.getCollection = function () {\n            return this.collection.get();\n        };\n\n        /**\n         * @ngdoc method\n         * @name get\n         * @methodOf JobRoleService\n         * @returns {*}\n         */\n        factory.get = function () {\n            /** @type {(JobRoleService|ModelService)} */\n            var self = this;\n\n            return init().then(function () {\n                return self.getCollection();\n            });\n        };\n\n        /////////////////////\n        // Private Members //\n        /////////////////////\n\n        function init() {\n            var deferred = $q.defer();\n\n            if (_.isEmpty(factory.collection.get())) {\n                Contract.get().then(function (response) {\n                    var contractIds = [];\n\n                    angular.forEach(response, function (contract) {\n                        contractIds.push(contract.id);\n                    });\n\n                    if (contractIds.length === 0) {\n                        return $q.reject('No job roles found for contracts');\n                    }\n\n                    Api.post('HrJobRoles', {job_contract_id: {'IN': contractIds}}, 'get')\n                        .then(function (response) {\n                            if (response.values.length === 0) {\n                                return $q.reject('No job roles found for contracts');\n                            }\n\n                        var roles = response.values.map(function (role) {\n                            return {\n                                id: role.id,\n                                title: role.title,\n                                department: role.department,\n                                status: role.status,\n                                start_date: role.start_date,\n                                end_date: role.end_date\n                            };\n                        });\n\n                        factory.collection.set(roles);\n                    })\n                    .finally(function () {\n                        deferred.resolve();\n                    });\n                });\n            } else {\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }\n\n        return factory;\n    }\n\n    services.factory('JobRoleService', ['$q', '$log', 'ApiService', 'ModelService', 'ContractService', JobRoleService]);\n});\n\n//# sourceURL=/contact-summary/services/jobRole.js"),eval("define('contact-summary/controllers/keyDates',[\n  'common/moment',\n  'contact-summary/modules/controllers',\n  'contact-summary/services/contract',\n  'contact-summary/services/jobRole',\n  'common/services/pub-sub',\n], function (moment, controllers) {\n  'use strict';\n\n  /**\n   * Add the contract dates to the timeline\n   *\n   * @param {Object} contract\n   */\n  function addContractDates(contract) {\n    this.dates.push({\n      title: contract.title + ' (Start)',\n      date: contract.start_date,\n      future: isDateInFuture(contract.start_date)\n    });\n\n    if (contract.end_date) {\n      this.dates.push({\n        title: contract.title + ' (End)',\n        date: contract.end_date,\n        future: isDateInFuture(contract.end_date)\n      });\n    }\n  }\n\n  /**\n   * Checks if a date is in the future\n   *\n   * @param {string} date\n   * @return {boolean}\n   */\n  function isDateInFuture(date) {\n    return moment().diff(date) < 0;\n  }\n\n  /**\n   * @ngdoc controller\n   * @name KeyDatesCtrl\n   * @param $log\n   * @param {ContractService} Contract\n   * @param {JobRoleService} JobRole\n   * @param {pubSub} pubSub\n   * @constructor\n   */\n  function KeyDatesCtrl($log, Contract, JobRole, pubSub) {\n    $log.debug('Controller: KeyDatesCtrl');\n\n    var self = this;\n    this.ready = false;\n    this.dates = [];\n    this.activeContracts = 0;\n    this.activeRoles = 0;\n\n    /**\n     * Fetch Contacts from Server\n     * @ngdoc method\n     * @name getContacts\n     * @methodOf KeyDatesCtrl\n     * @returns void\n     */\n    var getContacts = function(){\n      Contract.get()\n        .then(function (response) {\n          angular.forEach(response, function (contract) {\n            addContractDates.call(self, contract);\n\n            if (contract.is_current === '1') {\n              self.activeContracts++;\n            };\n          });\n\n          return JobRole.get();\n        })\n        .then(function (response) {\n          angular.forEach(response, function (role) {\n            var endDate = moment(role.end_date);\n\n            if (!endDate.isValid() || isDateInFuture(endDate)) {\n              self.activeRoles++;\n            }\n          });\n        })\n        .finally(function () {\n          self.ready = true;\n        });\n    }.bind(this);\n\n    var resetKeyDates = function() {\n      this.dates= [];\n      getContacts();\n    }.bind(this);\n\n    getContacts();\n\n    pubSub.subscribe('contract-refresh',  resetKeyDates);\n  }\n\n  controllers.controller('KeyDatesCtrl', ['$log', 'ContractService', 'JobRoleService','pubSub', KeyDatesCtrl]);\n});\n\n//# sourceURL=/contact-summary/controllers/keyDates.js"),eval("define('contact-summary/controllers/keyDetails',[\n  'common/moment',\n  'contact-summary/modules/controllers',\n  'contact-summary/services/contactDetails',\n  'contact-summary/services/contract',\n  'common/services/pub-sub',\n], function (moment, controllers) {\n  'use strict';\n\n  /**\n   * @ngdoc controller\n   * @name KeyDetailsCtrl\n   * @param $log\n   * @param {ContactDetailsService} ContactDetails\n   * @param {ContractService} Contract\n   * @param {pubSub} pubSub\n   * @constructor\n   */\n  function KeyDetailsCtrl($log, ContactDetails, Contract, pubSub) {\n    $log.debug('Controller: KeyDetailsCtrl');\n\n    this.ready = false;\n\n\n    /**\n     * Fetch Contacts from Server\n     * @ngdoc method\n     * @name getContacts\n     * @methodOf KeyDetailsCtrl\n     * @returns void\n     */\n    var getContacts = function(){\n      ContactDetails.get()\n        .then(function (response) {\n          this.contactDetails = response;\n          return Contract.getPrimary();\n        }.bind(this))\n        .then(function (response) {\n          if (_.isEmpty(response)) {\n            this.primaryContract = null;\n            return;\n          }\n          this.primaryContract = response;\n        }.bind(this))\n        .then(function (response) {\n          return Contract.getLengthOfService();\n        })\n        .then(function (response) {\n          this.lengthOfService = response;\n        }\n          .bind(this))\n        .finally(function () {\n          this.ready = true;\n        }.bind(this));\n    }.bind(this);\n\n    var resetKeyDetails = function() {\n      Contract.resetContracts();\n      ContactDetails.data.item = {};\n      getContacts();\n    };\n\n    getContacts();\n\n    pubSub.subscribe('contract-refresh',  resetKeyDetails);\n  }\n\n  /////////////////////\n  // Private Members //\n  /////////////////////\n\n  controllers.controller('KeyDetailsCtrl', ['$log', 'ContactDetailsService', 'ContractService', 'pubSub', KeyDetailsCtrl]);\n});\n\n//# sourceURL=/contact-summary/controllers/keyDetails.js"),
eval("define('contact-summary/modules/directives',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.directives', []);\n});\n\n//# sourceURL=/contact-summary/modules/directives.js"),eval("define('contact-summary/directives/donutChart',[\n    'common/d3',\n    'contact-summary/modules/directives'\n], function (d3, directives) {\n    'use strict';\n\n    function init($element) {\n        this.height = this.width = $element[0].clientWidth;\n        this.radius = this.width / 2 || 60;\n        this.thickness = this.thickness || 15;\n    }\n\n    function constructArc() {\n        return d3.svg.arc()\n            .innerRadius(this.radius - this.thickness)\n            .outerRadius(this.radius);\n    }\n\n    function constructChart(svg, arc, data) {\n        var color = d3.scale.category20();\n\n        return svg.selectAll('path')\n            .data(data)\n            .enter().append('path')\n            .attr('fill', function (d, i) {\n                return color(i);\n            })\n            .attr('class', function (d, i) {\n                return 'chart-color-' + i;\n            })\n            .attr('d', arc);\n    }\n\n    function constructData() {\n        var pieLayout = d3.layout.pie()\n            .sort(null)\n            .value(function (d) {\n                return d.value[this.itemKey];\n            }.bind(this));\n\n        return pieLayout(d3.entries(this.items));\n    }\n\n    function constructSvg($element) {\n        return d3.select($element).append('svg')\n            .attr('width', this.width)\n            .attr('height', this.height)\n            .append('g')\n            .attr('transform', 'translate(' + this.width / 2 + ',' + this.height / 2 + ')');\n    }\n\n\n    directives.directive('csDonutChart', ['$log', function ($log) {\n        $log.debug('Directive: csDonutChart');\n\n        return {\n            controllerAs: 'CsDonutChartCtrl',\n            restrict: 'AE',\n            scope: {\n                radius: '@',\n                thickness: '@',\n                items: '=',\n                itemKey: '@',\n                ready: '='\n            },\n            controller: ['$scope', '$element', function ($scope, $element) {\n                this.drawChart = function () {\n                    // angular.extend is necessary cause `bindToController` is\n                    // available only in angular > 1.3\n                    init.call(angular.extend(this, $scope), $element);\n\n                    constructChart(\n                        constructSvg.call(this, $element[0]),\n                        constructArc.call(this),\n                        constructData.call(this)\n                    );\n                };\n            }],\n            link: function (scope, elem, attrs, ctrl) {\n                var unbindWatch = scope.$watch(function () {\n                    return scope.ready;\n                }, function (newValue, oldValue) {\n                    if (newValue === true) {\n                        ctrl.drawChart();\n                        unbindWatch();\n                    }\n              });\n            }\n        };\n    }]);\n});\n\n//# sourceURL=/contact-summary/directives/donutChart.js"),eval("/* eslint-env amd */\n\ndefine('contact-summary/app',[\n  'common/angular',\n  'leave-absences/shared/components/leave-widget/leave-widget.component',\n  'contact-summary/modules/filters',\n  'contact-summary/modules/services',\n  'contact-summary/modules/settings',\n  'contact-summary/controllers/contactSummary',\n  'contact-summary/controllers/keyDates',\n  'contact-summary/controllers/keyDetails',\n  'contact-summary/directives/donutChart'\n], function (angular) {\n  var app = angular.module('contactsummary', [\n    'ngRoute',\n    'ngResource',\n    'ui.bootstrap',\n    'common.services',\n    'leave-absences.components',\n    'leave-absences.settings',\n    'contactsummary.controllers',\n    'contactsummary.directives',\n    'contactsummary.filters',\n    'contactsummary.services',\n    'contactsummary.settings'\n  ]);\n\n  app.config(['settings', '$routeProvider', '$resourceProvider', '$httpProvider', '$logProvider',\n    function (settings, $routeProvider, $resourceProvider, $httpProvider, $logProvider) {\n      $logProvider.debugEnabled(settings.debug);\n\n      $routeProvider\n        .when('/', {\n          controller: 'ContactSummaryCtrl',\n          controllerAs: 'ContactSummaryCtrl',\n          templateUrl: settings.pathBaseUrl + settings.pathTpl + 'mainTemplate.html',\n          resolve: {}\n        }\n      ).otherwise({redirectTo: '/'});\n\n      $resourceProvider.defaults.stripTrailingSlashes = false;\n      $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    }\n  ]);\n\n  app.run(['settings', '$rootScope', '$q', '$log',\n    function (settings, $rootScope, $q, $log) {\n      $log.debug('app.run');\n\n      $rootScope.pathTpl = settings.pathTpl;\n      $rootScope.prefix = settings.classNamePrefix;\n    }\n  ]);\n});\n\n//# sourceURL=/contact-summary/app.js"),eval("(function (CRM, require) {\n  require.config({\n    urlArgs: 'bust=' + (new Date()).getTime(),\n    paths: {\n      'contact-summary': CRM.vars.contactsummary.baseURL + '/js/src/contact-summary'\n    }\n  });\n\n  require(['contact-summary/app'], function () {\n    document.dispatchEvent(typeof window.CustomEvent == \"function\" ? new CustomEvent('contactsummaryReady') : (function () {\n      var e = document.createEvent('Event');\n      e.initEvent('contactsummaryReady', true, true);\n      return e;\n    })());\n  });\n})(CRM, require);\n\n//# sourceURL=/contact-summary.js");
//# sourceMappingURL=contact-summary.min.js.map